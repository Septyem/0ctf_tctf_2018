#include<iostream>
#include<fstream>
#include<random>
#include<stdint.h>
#include<limits.h>

using namespace std;

unsigned int r[32] = {6, 10, 15, 21,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22, 5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  4, 11, 16, 23};
uint32_t k[32] = {3614090360, 3905402710, 606105819, 3250441966, 4118548399, 1200080426, 2821735955, 4249261313, 1770035416, 2336552879, 4294925233, 2304563134, 1804603682, 4254626195, 2792965006, 1236535329, 4129170786, 3225465664, 643717713, 3921069994, 3593408605, 38016083, 3634488961, 3889429448, 568446438, 3275163606, 4107603335, 1163531501, 2850285829, 4243563512, 1735328473, 2368359562};

static inline uint32_t rotl32 (uint32_t n, unsigned int c)
{
  const unsigned int mask = (CHAR_BIT*sizeof(n) - 1);  // assumes width is a power of 2.
  // assert ( (c<=mask) &&"rotate by type width or more");
  c &= mask;
  return (n<<c) | (n>>( (-c)&mask ));
}

uint32_t onestepre(uint32_t a, uint32_t b, uint32_t c, uint32_t d, uint32_t b1, int i) {
    uint32_t f;
    unsigned int g;
    if (i<4)
        f = c ^ (b | (~d));
    else if (i<16)
        f = (b & c) | ((~b) & d);
    else if (i<28)
        f = (b & d) | ((~d) & c);
    else 
        f = b ^ c ^ d;

    return rotl32(b1-b, 32-r[i])-a-f-k[i];
}

uint32_t onestep(uint32_t a, uint32_t b, uint32_t c, uint32_t d, uint32_t *w, int i) {
    uint32_t f;
    unsigned int g;
    if (i<4)
        f = c ^ (b | (~d));
    else if (i<16)
        f = (b & c) | ((~b) & d);
    else if (i<28)
        f = (b & d) | ((~d) & c);
    else 
        f = b ^ c ^ d;

    if (i<16)
        g = i;
    else
        g = (5*i+1)%16;

    return rotl32(a+f+k[i]+w[g], r[i])+b;
}

int notmd5(uint32_t *w, uint32_t *out) {
    uint32_t a,b,c,d,tmp,tmp2;
    int i;
    a = 0xe8b5b857;
    b = 0xc99e4547;
    c = 0x579f7a90;
    d = 0x1fff0731;

    for (i=0; i<32; i++) {
        tmp2 = onestep(a,b,c,d,w,i);
        tmp = d;
        d = c;
        c = b;
        b = tmp2;
        a = tmp;
    }

    out[0] = a;
    out[1] = b;
    out[2] = c;
    out[3] = d;
    return 0;
}

uint32_t testw0[16] = {48050641, 3303990981, 110771561, 1559867288, 2276837935, 2877179410, 1045955648, 2306866104, 104115541, 45347849, 2206786691, 1514238245, 3894759688, 2680802807, 4072480217, 1530673024};
uint32_t testw1[16] = {48050641, 3303990981, 110771561, 1559867288, 129354287, 2877179410, 1045955648, 2306866104, 104115541, 45347849, 2206786691, 1514271013, 3894759688, 2680802807, 1924996569, 1530673024};

uint32_t bitcond[25][3] = {{0, 4294967295, 0}, {0, 4294967295, 0}, {0, 4294967295, 0}, {0, 4294440895, 0}, {2148009984, 4286578623, 7862144}, {2285895717, 4251975743, 0}, {41925697, 58702923, 16777226}, {67041312, 67041312, 0}, {26281280, 32593216, 0}, {4212141885, 4226842429, 4096}, {1075826752, 2139086460, 0}, {114882, 1072811774, 0}, {528640, 1073225599, 50331648}, {1091559432, 2113928831, 0}, {778632, 1560018943, 0}, {553680896, 2113929207, 0}, {536870912, 2147483647, 0}, {0, 2147352575, 32776}, {131072, 2147483647, 536870912}, {0, 2147352575, 0}, {0, 2147483647, 0}, {0, 2147483647, 131072}, {0, 2147483647, 0}, {0, 2147483647, 0}, {2147483648, 4294967295, 0}};
int dq[25][32] = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1}, {1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 1, 1, 1, 1, 1, 1}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 1, 1, 1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0}, {-1, 1, 0, 0, 0, 0, 1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1}, {0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 1}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
uint32_t dw[16] = {0, 0, 0, 0, 2147483648, 0, 0, 0, 0, 0, 0, 32768, 0, 0, 2147483648, 0};
uint32_t w[16], w1[16], q[40];

char prefix[4], coll0[60], coll1[60];

int main() {
    int i,j;
    uint32_t out[4], out1[4];
    /*
    uint32_t b1 = onestep(0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, testw0, 0);
    cout<<b1<<endl;
    uint32_t b0 = onestepre(0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, b1, 0);
    cout<<b0<<endl;
    notmd5(testw1, out);
    for (i=0;i<4;i++)
        cout<<out[i]<<' ';
    */
    random_device rd;
    mt19937_64 gen(rd());
    uniform_int_distribution<uint32_t> dis;

    /*
    for (i=0;i<16;i++) {
        cout<<k[i]<<endl;
    }*/

    ifstream fin("prefix", ios::binary);
    fin.read(prefix, 4);
    uint32_t w0=0;
    for (i=3;i>=0;i--) {
        int tmp = prefix[i];
        tmp &= 0xff;
        w0 = w0*256+tmp;
    }
    w[0] = w0;
    q[0] = 0xe8b5b857;
    q[1] = 0x1fff0731;
    q[2] = 0x579f7a90;
    q[3] = 0xc99e4547;
    q[0+4] = onestep(q[0], q[3], q[2], q[1], w, 0);

    while (1) {
        uint32_t q0,q1,delta;
        for (i=1; i<16; i++) {
            q0 = dis(gen);
            q1 = q[i+3];
            q0 |= bitcond[i+1][0];
            q0 &= bitcond[i+1][1];
            delta = (q1&bitcond[i+1][2])^(q0&bitcond[i+1][2]);
            q0 ^= delta;
            q[i+1+3] = q0;
            w[i] = onestepre(q[i-3+3], q[i+3], q[i-1+3], q[i-2+3], q[i+1+3], i);
        }
        /*
        for (i=0;i<16;i++)
            cout<<i<<' '<<q[i+1+3]-onestep(q[i-3+3], q[i+3], q[i-1+3], q[i-2+3], w, i)<<endl;
        */
        bool ok = true;
        //bool dolog=false;
        for (i=16; i<24; i++) {
            q1 = q[i+3];
            q0 = onestep(q[i-3+3], q[i+3], q[i-1+3], q[i-2+3], w, i);
            if ((q0&bitcond[i+1][0]) != bitcond[i+1][0])
                ok = false;
            /*
            if (i==16&&q0==229870196) {
                cout<<"---"<<(q0&(~bitcond[i+1][1]))<<endl;
                dolog=true;
            }*/
            if ((q0&(~bitcond[i+1][1])) != 0)
                ok = false;
            delta = (q1&bitcond[i+1][2])^(q0&bitcond[i+1][2]);
            if (delta!=0)
                ok = false;
            q[i+1+3] = q0;
            /*
            if (i==16&&dolog) {
                cout<<q[i+1+3]<<endl;
            }
            */
            if (!ok)
                break;
        }
        if (!ok)
            continue;
        /*
        for (i=1;i<25;i++)
            cout<<i<<' '<<q[i+3]<<endl;
        */
        for (i=0;i<16;i++)
            w1[i] = w[i]+dw[i];
        notmd5(w, out);
        notmd5(w1, out1);
        for (i=0;i<4;i++)
            if (out[i] != out1[i]) {
                ok = false;
                break;
            }
        if (ok) 
            break;
    }

    for (i=0;i<15;i++) {
        uint32_t tmp = w[i+1];
        uint32_t tmp1 = tmp + dw[i+1];
        for (j=0;j<4;j++) {
            coll0[i*4+j] = tmp%256;
            tmp /= 256;
        }
        for (j=0;j<4;j++) {
            coll1[i*4+j] = tmp1%256;
            tmp1 /= 256;
        }
    }

    ofstream fout0("coll0", ios::binary);
    fout0.write(coll0, 60);
    ofstream fout1("coll1", ios::binary);
    fout1.write(coll1, 60);
    return 0;
}
